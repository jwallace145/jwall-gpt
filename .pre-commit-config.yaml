# Pre-commit hooks for jwall-gpt
# Install: pip install pre-commit && pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
        name: Trim trailing whitespace
      - id: end-of-file-fixer
        name: Fix end of files
      - id: check-yaml
        name: Check YAML syntax
      - id: check-toml
        name: Check TOML syntax
      - id: check-merge-conflict
        name: Check for merge conflicts
      - id: check-added-large-files
        args: ['--maxkb=1000']
        name: Check for large files

  # Rust formatting
  - repo: local
    hooks:
      - id: cargo-fmt
        name: Cargo fmt (format code)
        entry: cargo fmt --all --
        language: system
        types: [rust]
        pass_filenames: false
        description: "Format Rust code using rustfmt"

  # Rust linting
  - repo: local
    hooks:
      - id: cargo-clippy
        name: Cargo clippy (lint)
        entry: cargo clippy --all-targets --all-features -- -D warnings
        language: system
        types: [rust]
        pass_filenames: false
        description: "Lint Rust code using clippy with all warnings as errors"

  # Rust testing - comprehensive
  - repo: local
    hooks:
      - id: cargo-test
        name: Cargo test (all features)
        entry: cargo test --all-features
        language: system
        types: [rust]
        pass_filenames: false
        description: "Run all tests with all features enabled"

      - id: cargo-test-no-default
        name: Cargo test (no default features)
        entry: cargo test --no-default-features
        language: system
        types: [rust]
        pass_filenames: false
        description: "Run all tests without default features (naive backend)"

  # Rust compilation check
  - repo: local
    hooks:
      - id: cargo-check
        name: Cargo check
        entry: cargo check --all-targets --all-features
        language: system
        types: [rust]
        pass_filenames: false
        description: "Check that the code compiles"

  # Documentation check
  - repo: local
    hooks:
      - id: cargo-doc
        name: Cargo doc (check docs)
        entry: cargo doc --no-deps --all-features
        language: system
        types: [rust]
        pass_filenames: false
        description: "Ensure documentation builds without errors"
        stages: [manual]  # Only run when explicitly requested

# Performance optimizations
default_install_hook_types: [pre-commit]
fail_fast: false  # Run all hooks even if one fails
